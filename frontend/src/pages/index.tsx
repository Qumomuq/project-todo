import Head from "next/head";
import {Inter} from "next/font/google";
import CardList from "@/components/CardList";
import {TCard} from "@/types/card";
import {GetServerSideProps, InferGetServerSidePropsType} from "next";
import React, {useEffect, useState} from "react";
import {useRouter} from "next/router";
import LeftBar from "@/components/LeftBar";
import {mark, priority, limit} from "@/store/localstore";

const inter = Inter({subsets: ["latin"]});

export default function Home({cards, filterCookie}: InferGetServerSidePropsType<typeof getServerSideProps>) {

    const router = useRouter()
    const [filter, setFilter] = useState(filterCookie)

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <div className={"container-button"}>
                <LeftBar stateFilter={filter} filter={setFilter}/>
                <div className={"container-main"}>
                    <button className={"button button-large button-blue"} onClick={() => router.push('/card')}>Добавить
                        задачу
                    </button>
                    <CardList cards={cards} filter={filter}/>
                </div>
            </div>
        </>
    );
}

export const getServerSideProps = (async (context) => {
    const filterCookie = {
        sort: context.req.cookies['sort'] || '1',
        mark: context.req.cookies['mark']?.split(';') || mark,
        priority: context.req.cookies['priority']?.split(';') || priority,
    }
    let res = await fetch(`http://localhost:5000/api/card?page=${context.query?.page}&limit=${limit}&sort=${filterCookie.sort}&mark=${filterCookie.mark}&priority=${filterCookie.priority}`)
    if (!res) {
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }
    let cards: TCard[] = await res.json()

    return {props: {cards, filterCookie}}
}) satisfies GetServerSideProps<{ cards: TCard[], filterCookie: any }>


